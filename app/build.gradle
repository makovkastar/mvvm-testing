apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "kotlin-allopen"

apply plugin: 'jacoco'

android {
    compileSdkVersion versions.compileSdk

    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin'
        }
        test {
            java.srcDirs += 'src/test/kotlin'
        }
        androidTest {
            java.srcDirs += 'src/androidTest/kotlin'
        }
    }

    defaultConfig {
        applicationId "com.melnykov.mvvmtesting"

        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.melnykov.mvvmtesting.testutil.AndroidTestRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

allOpen {
    annotation 'com.melnykov.mvvmtesting.OpenClass'
}

jacoco {
    toolVersion = versions.jacoco
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

    implementation "com.android.support:appcompat-v7:${versions.supportLibrary}"
    implementation "com.android.support.constraint:constraint-layout:${versions.constraintLayout}"

    implementation "android.arch.lifecycle:extensions:${versions.archComponents}"
    kapt "android.arch.lifecycle:compiler:${versions.archComponents}"

    implementation "android.arch.persistence.room:runtime:${versions.archComponents}"
    kapt "android.arch.persistence.room:compiler:${versions.archComponents}"

    implementation "com.google.dagger:dagger:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"

    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${versions.retrofit}"

    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.hamcrest:hamcrest-all:${versions.hamcrest}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "android.arch.core:core-testing:${versions.archComponents}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp}"

    androidTestImplementation "com.android.support.test:runner:${versions.testRunner}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:${versions.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:${versions.espresso}"
    androidTestImplementation "org.mockito:mockito-android:${versions.mockito}"
    androidTestImplementation "android.arch.core:core-testing:${versions.archComponents}"
}


task createCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component*.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class',
                      '**/*Module*.class',
                      '**/BR.*',
                      '**/*Binding.class',
                      '**/*Binding$*.class']

    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([javaDebugTree], [kotlinDebugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
        "jacoco/testDebugUnitTest.exec",
        "outputs/code-coverage/connected/*coverage.ec"
    ])
}